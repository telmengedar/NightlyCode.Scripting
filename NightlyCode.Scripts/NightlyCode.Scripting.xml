<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NightlyCode.Scripting</name>
    </assembly>
    <members>
        <member name="T:NightlyCode.Scripting.Control.Break">
            <summary>
            breaks execution of a loop
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Control.Break.#ctor(NightlyCode.Scripting.Tokens.IScriptToken)">
            <summary>
            creates a new <see cref="T:NightlyCode.Scripting.Control.Break"/>
            </summary>
            <param name="depth">depth to break</param>
        </member>
        <member name="P:NightlyCode.Scripting.Control.Break.Depth">
            <summary>
            number of loops to break with this statement
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Control.Break.ExecuteToken(NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
        <member name="M:NightlyCode.Scripting.Control.Break.ToString">
            <inheritdoc />
        </member>
        <member name="T:NightlyCode.Scripting.Control.Case">
            <summary>
            case for a <see cref="T:NightlyCode.Scripting.Control.Switch"/> statement
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Control.Case.#ctor">
            <summary>
            creates a new <see cref="T:NightlyCode.Scripting.Control.Case"/>
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Control.Case.#ctor(NightlyCode.Scripting.Tokens.IScriptToken[])">
            <summary>
            creates a new <see cref="T:NightlyCode.Scripting.Control.Case"/>
            </summary>
            <param name="conditions">conditions to match</param>
        </member>
        <member name="P:NightlyCode.Scripting.Control.Case.IsDefault">
            <summary>
            determines whether this is the default case
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Control.Case.Matches(System.Object,NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <summary>
            determines whether case matches a value
            </summary>
            <param name="value">value to match</param>
            <param name="arguments">script arguments</param>
            <returns>true if case matches value, false otherwise</returns>
        </member>
        <member name="M:NightlyCode.Scripting.Control.Case.ExecuteToken(NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
        <member name="P:NightlyCode.Scripting.Control.Case.Body">
            <inheritdoc />
        </member>
        <member name="M:NightlyCode.Scripting.Control.Case.ToString">
            <inheritdoc />
        </member>
        <member name="T:NightlyCode.Scripting.Control.Catch">
            <summary>
            token containing body for a <see cref="T:NightlyCode.Scripting.Control.Try"/> statement when an exception is catched
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Control.Catch.ExecuteToken(NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
        <member name="P:NightlyCode.Scripting.Control.Catch.Body">
            <inheritdoc />
        </member>
        <member name="T:NightlyCode.Scripting.Control.Continue">
            <summary>
            breaks execution of a loop
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Control.Continue.#ctor(NightlyCode.Scripting.Tokens.IScriptToken)">
            <summary>
            creates a new <see cref="T:NightlyCode.Scripting.Control.Break"/>
            </summary>
            <param name="depth">loop depth to continue</param>
        </member>
        <member name="P:NightlyCode.Scripting.Control.Continue.Depth">
            <summary>
            specifies the depth of continue statement
            </summary>
            <remarks>
            a depth of 2 means that the current loop ended the the outer loop is continued instead
            </remarks>
        </member>
        <member name="M:NightlyCode.Scripting.Control.Continue.ExecuteToken(NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
        <member name="M:NightlyCode.Scripting.Control.Continue.ToString">
            <inheritdoc />
        </member>
        <member name="T:NightlyCode.Scripting.Control.ControlToken">
            <summary>
            token representing a control structure
            </summary>
        </member>
        <member name="P:NightlyCode.Scripting.Control.ControlToken.Body">
            <inheritdoc />
        </member>
        <member name="T:NightlyCode.Scripting.Control.Else">
            <summary>
            token containing body for an <see cref="T:NightlyCode.Scripting.Control.If"/> statement of which condition is not met
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Control.Else.ExecuteToken(NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
        <member name="P:NightlyCode.Scripting.Control.Else.Body">
            <inheritdoc />
        </member>
        <member name="T:NightlyCode.Scripting.Control.For">
            <summary>
            loop with an initializer, a condition and an increment
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Control.For.#ctor(NightlyCode.Scripting.Tokens.IScriptToken[])">
            <summary>
            creates a new <see cref="T:NightlyCode.Scripting.Control.For"/> statement 
            </summary>
            <param name="loopparameters"></param>
        </member>
        <member name="M:NightlyCode.Scripting.Control.For.ExecuteToken(NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
        <member name="P:NightlyCode.Scripting.Control.For.Body">
            <inheritdoc />
        </member>
        <member name="M:NightlyCode.Scripting.Control.For.ToString">
            <inheritdoc />
        </member>
        <member name="T:NightlyCode.Scripting.Control.Foreach">
            <summary>
            loop which iterates over a collection
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Control.Foreach.#ctor(NightlyCode.Scripting.Tokens.IScriptToken[])">
            <summary>
            creates a new <see cref="T:NightlyCode.Scripting.Control.Foreach"/>
            </summary>
            <param name="parameters">parameters containing iterator variable and collection to iterate over</param>
        </member>
        <member name="M:NightlyCode.Scripting.Control.Foreach.ExecuteToken(NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
        <member name="P:NightlyCode.Scripting.Control.Foreach.Body">
            <inheritdoc />
        </member>
        <member name="M:NightlyCode.Scripting.Control.Foreach.ToString">
            <inheritdoc />
        </member>
        <member name="T:NightlyCode.Scripting.Control.IControlToken">
            <summary>
            token representing a flow control statement
            </summary>
        </member>
        <member name="P:NightlyCode.Scripting.Control.IControlToken.Body">
            <summary>
            body of control statement
            </summary>
        </member>
        <member name="T:NightlyCode.Scripting.Control.If">
            <summary>
            statement execution a body when a condition is met
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Control.If.#ctor(NightlyCode.Scripting.Tokens.IScriptToken[])">
            <summary>
            creates a new <see cref="T:NightlyCode.Scripting.Control.If"/> statement
            </summary>
            <param name="parameters">condition statement has to match to execute body</param>
        </member>
        <member name="M:NightlyCode.Scripting.Control.If.ExecuteToken(NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
        <member name="P:NightlyCode.Scripting.Control.If.Body">
            <summary>
            body to execute if condition is met
            </summary>
        </member>
        <member name="P:NightlyCode.Scripting.Control.If.Else">
            <summary>
            body to execute when condition is not met
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Control.If.ToString">
            <inheritdoc />
        </member>
        <member name="T:NightlyCode.Scripting.Control.Import">
            <summary>
            imports a script method using the <see cref="T:NightlyCode.Scripting.Providers.IExternalMethodProvider"/> of the parser
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Control.Import.#ctor(NightlyCode.Scripting.Providers.IExternalMethodProvider,NightlyCode.Scripting.Tokens.IScriptToken)">
            <summary>
            creates a new <see cref="T:NightlyCode.Scripting.Control.Import"/>
            </summary>
            <param name="methodprovider"></param>
            <param name="key"></param>
        </member>
        <member name="T:NightlyCode.Scripting.Control.ParserToken">
            <summary>
            token containing meta information for parsing process
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Control.ParserToken.#ctor(System.String)">
            <summary>
            creates a new <see cref="T:NightlyCode.Scripting.Control.ParserToken"/>
            </summary>
            <param name="data">data specifying parser case</param>
        </member>
        <member name="T:NightlyCode.Scripting.Control.Return">
            <summary>
            returns a value and end execution of current method
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Control.Return.#ctor(NightlyCode.Scripting.Tokens.IScriptToken)">
            <summary>
            creates a new <see cref="T:NightlyCode.Scripting.Control.Return"/>
            </summary>
            <param name="value">token to return</param>
        </member>
        <member name="P:NightlyCode.Scripting.Control.Return.Value">
            <summary>
            token resulting in value to return
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Control.Return.ExecuteToken(NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
        <member name="M:NightlyCode.Scripting.Control.Return.ToString">
            <inheritdoc />
        </member>
        <member name="T:NightlyCode.Scripting.Control.StatementBlock">
            <summary>
            a block of statements executed in sequence
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Control.StatementBlock.#ctor(NightlyCode.Scripting.Tokens.IScriptToken[],System.Boolean)">
            <summary>
            creates a new <see cref="T:NightlyCode.Scripting.Control.StatementBlock"/>
            </summary>
            <param name="statements">statements in block</param>
            <param name="methodblock">determines whether this is the main block of a method</param>
        </member>
        <member name="M:NightlyCode.Scripting.Control.StatementBlock.ExecuteToken(NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
        <member name="M:NightlyCode.Scripting.Control.StatementBlock.ToString">
            <inheritdoc />
        </member>
        <member name="T:NightlyCode.Scripting.Control.Switch">
            <summary>
            evaluates a value and jumps to matching cases
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Control.Switch.#ctor(NightlyCode.Scripting.Tokens.IScriptToken[])">
            <summary>
            creates a new <see cref="T:NightlyCode.Scripting.Control.Switch"/> statement
            </summary>
            <param name="parameters">parameters which contain value to evaluate</param>
        </member>
        <member name="P:NightlyCode.Scripting.Control.Switch.Default">
            <summary>
            default case executed if no other case matches
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Control.Switch.AddCase(NightlyCode.Scripting.Control.Case)">
            <summary>
            adds a case to the switch statement
            </summary>
            <param name="case">case to add</param>
        </member>
        <member name="M:NightlyCode.Scripting.Control.Switch.ExecuteToken(NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
        <member name="M:NightlyCode.Scripting.Control.Switch.ToString">
            <inheritdoc />
        </member>
        <member name="P:NightlyCode.Scripting.Control.Switch.Body">
            <summary>
            a body is not used for switch statements
            </summary>
        </member>
        <member name="T:NightlyCode.Scripting.Control.Throw">
            <summary>
            throws an exception from currently executed code
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Control.Throw.#ctor(NightlyCode.Scripting.Tokens.IScriptToken[])">
            <summary>
            creates a new <see cref="T:NightlyCode.Scripting.Control.Throw"/>
            </summary>
            <param name="parameters">parameters for throw</param>
        </member>
        <member name="M:NightlyCode.Scripting.Control.Throw.ExecuteToken(NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
        <member name="M:NightlyCode.Scripting.Control.Throw.ToString">
            <inheritdoc />
        </member>
        <member name="T:NightlyCode.Scripting.Control.Try">
            <summary>
            statement wrapping a body for exception handling
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Control.Try.ExecuteToken(NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
        <member name="P:NightlyCode.Scripting.Control.Try.Body">
            <inheritdoc />
        </member>
        <member name="P:NightlyCode.Scripting.Control.Try.Catch">
            <summary>
            body to execute when condition is not met
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Control.Try.ToString">
            <inheritdoc />
        </member>
        <member name="T:NightlyCode.Scripting.Control.Using">
            <summary>
            block which handles a disposable resource
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Control.Using.ExecuteToken(NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
        <member name="P:NightlyCode.Scripting.Control.Using.Body">
            <inheritdoc />
        </member>
        <member name="M:NightlyCode.Scripting.Control.Using.ToString">
            <inheritdoc />
        </member>
        <member name="T:NightlyCode.Scripting.Control.While">
            <summary>
            executes a statement block while a condition is met
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Control.While.#ctor(NightlyCode.Scripting.Tokens.IScriptToken[])">
            <summary>
            creates a new <see cref="T:NightlyCode.Scripting.Control.While"/>
            </summary>
            <param name="parameters">parameters containing condition to check</param>
        </member>
        <member name="M:NightlyCode.Scripting.Control.While.ExecuteToken(NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
        <member name="P:NightlyCode.Scripting.Control.While.Body">
            <inheritdoc />
        </member>
        <member name="T:NightlyCode.Scripting.Data.ExternalScriptMethod">
            <summary>
            script method provided by resolver
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Data.ExternalScriptMethod.#ctor(NightlyCode.Scripting.IScript)">
            <summary>
            creates a new <see cref="T:NightlyCode.Scripting.Data.ExternalScriptMethod"/>
            </summary>
            <param name="script"></param>
        </member>
        <member name="M:NightlyCode.Scripting.Data.ExternalScriptMethod.Invoke(System.Object[])">
            <summary>
            invokes the method with the specified arguments
            </summary>
            <param name="arguments">arguments for script method</param>
            <returns>result of script execution</returns>
        </member>
        <member name="T:NightlyCode.Scripting.Data.IExternalMethod">
            <summary>
            interface for an external method which can get called from a script
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Data.IExternalMethod.Invoke(System.Object[])">
            <summary>
            invokes the method with the specified arguments
            </summary>
            <param name="arguments">arguments for script method</param>
            <returns>result of script execution</returns>
        </member>
        <member name="T:NightlyCode.Scripting.Data.Operator">
            <summary>
            operator type
            </summary>
            <remarks>
            the order in this enumeration is used for operator priority
            </remarks>
        </member>
        <member name="F:NightlyCode.Scripting.Data.Operator.Not">
            <summary>
            Negates a boolean value
            </summary>
        </member>
        <member name="F:NightlyCode.Scripting.Data.Operator.Negate">
            <summary>
            negates an arithmetic value
            </summary>
        </member>
        <member name="F:NightlyCode.Scripting.Data.Operator.Complement">
            <summary>
            Flips every bit of a numerical value
            </summary>
        </member>
        <member name="F:NightlyCode.Scripting.Data.Operator.Increment">
            <summary>
            Increments the token this operator is attached to by 1
            </summary>
        </member>
        <member name="F:NightlyCode.Scripting.Data.Operator.Decrement">
            <summary>
            Decrements the token this operator is attached to by 1
            </summary>
        </member>
        <member name="F:NightlyCode.Scripting.Data.Operator.Division">
            <summary>
            Divides the left hand side value by the right hand side value
            </summary>
        </member>
        <member name="F:NightlyCode.Scripting.Data.Operator.Multiplication">
            <summary>
            Multiplies the left hand side value by the right hand side value
            </summary>
        </member>
        <member name="F:NightlyCode.Scripting.Data.Operator.Modulo">
            <summary>
            Computes the remainder when dividing the left hand side value by the right hand side value
            </summary>
        </member>
        <member name="F:NightlyCode.Scripting.Data.Operator.Subtraction">
            <summary>
            Subtracts the right hand side value from the left hand side
            </summary>
        </member>
        <member name="F:NightlyCode.Scripting.Data.Operator.Addition">
            <summary>
            Adds left hand side and right hand side
            </summary>
        </member>
        <member name="F:NightlyCode.Scripting.Data.Operator.Less">
            <summary>
            Determines whether the left hand side value is less than the right hand side value
            </summary>
        </member>
        <member name="F:NightlyCode.Scripting.Data.Operator.LessOrEqual">
            <summary>
            Determines whether the left hand side value is less than or equal to the right hand side value
            </summary>
        </member>
        <member name="F:NightlyCode.Scripting.Data.Operator.Greater">
            <summary>
            Determines whether the left hand side value is greater than the right hand side value
            </summary>
        </member>
        <member name="F:NightlyCode.Scripting.Data.Operator.GreaterOrEqual">
            <summary>
            Determines whether the left hand side value is greater than or equal to the right hand side value
            </summary>
        </member>
        <member name="F:NightlyCode.Scripting.Data.Operator.Equal">
            <summary>
            Determines whether the left hand side is equal to the right hand side
            </summary>
        </member>
        <member name="F:NightlyCode.Scripting.Data.Operator.NotEqual">
            <summary>
            Not Equals|Determines whether the left hand side is not equal to the right hand side
            </summary>
        </member>
        <member name="F:NightlyCode.Scripting.Data.Operator.Matches">
            <summary>
            Determines whether the left hand side value matches the regex pattern on the right hand side
            </summary>
        </member>
        <member name="F:NightlyCode.Scripting.Data.Operator.NotMatches">
            <summary>
            Determines whether the left hand side value does not match the regex pattern of the right hand side
            </summary>
        </member>
        <member name="F:NightlyCode.Scripting.Data.Operator.BitwiseAnd">
            <summary>
            Applies a bitwise and between left hand side and right hand side
            </summary>
        </member>
        <member name="F:NightlyCode.Scripting.Data.Operator.BitwiseOr">
            <summary>
            Applies a bitwise or between left hand side and right hand side
            </summary>
        </member>
        <member name="F:NightlyCode.Scripting.Data.Operator.BitwiseXor">
            <summary>
            Applies a bitwise xor between left hand side and right hand side
            </summary>
        </member>
        <member name="F:NightlyCode.Scripting.Data.Operator.ShiftLeft">
            <summary>
            Shifts left the bits of the left hand side value by the number of steps specified by the right hand side value
            </summary>
        </member>
        <member name="F:NightlyCode.Scripting.Data.Operator.ShiftRight">
            <summary>
            Shifts right the bits of the left hand side value by the number of steps specified by the right hand side value
            </summary>
        </member>
        <member name="F:NightlyCode.Scripting.Data.Operator.RolLeft">
            <summary>
            Rolls left the bits of the left hand side value by the number of steps specified by the right hand side value
            </summary>
        </member>
        <member name="F:NightlyCode.Scripting.Data.Operator.RolRight">
            <summary>
            Rolls right the bits of the left hand side value by the number of steps specified by the right hand side value
            </summary>
        </member>
        <member name="F:NightlyCode.Scripting.Data.Operator.LogicAnd">
            <summary>
            Computes the logical and between the left hand side boolean and the right hand side boolean
            </summary>
        </member>
        <member name="F:NightlyCode.Scripting.Data.Operator.LogicOr">
            <summary>
            Computes the logical or between the left hand side boolean and the right hand side boolean
            </summary>
        </member>
        <member name="F:NightlyCode.Scripting.Data.Operator.LogicXor">
            <summary>
            Computes the logical xor between the left hand side boolean and the right hand side boolean
            </summary>
        </member>
        <member name="F:NightlyCode.Scripting.Data.Operator.Assignment">
            <summary>
            Assigns the value of the right hand side expression to the left hand side token
            </summary>
        </member>
        <member name="F:NightlyCode.Scripting.Data.Operator.AddAssign">
            <summary>
            Adds the right hand side to the left hand side storing the result in the left hand side
            </summary>
        </member>
        <member name="F:NightlyCode.Scripting.Data.Operator.SubAssign">
            <summary>
            Subtracts the right hand side from the left hand side storing the result in the left hand side
            </summary>
        </member>
        <member name="F:NightlyCode.Scripting.Data.Operator.DivAssign">
            <summary>
            Divides the left hand side by the right hand side storing the result in the left hand side
            </summary>
        </member>
        <member name="F:NightlyCode.Scripting.Data.Operator.MulAssign">
            <summary>
            Multiplicates the right hand side with the left hand side storing the result in the left hand side
            </summary>
        </member>
        <member name="F:NightlyCode.Scripting.Data.Operator.ModAssign">
            <summary>
            Computes the remainder when dividing the left hand side by the right hand side storing the result in the left hand side
            </summary>
        </member>
        <member name="F:NightlyCode.Scripting.Data.Operator.ShlAssign">
            <summary>
            Shifts left the left hand side by the number of steps indicated by the right hand side storing the result in the left hand side
            </summary>
        </member>
        <member name="F:NightlyCode.Scripting.Data.Operator.ShrAssign">
            <summary>
            Shifts right the left hand side by the number of steps indicated by the right hand side storing the result in the left hand side
            </summary>
        </member>
        <member name="F:NightlyCode.Scripting.Data.Operator.AndAssign">
            <summary>
            Applies a bitwise and between left hand side and right hand side storing the result in the left hand side
            </summary>
        </member>
        <member name="F:NightlyCode.Scripting.Data.Operator.OrAssign">
            <summary>
            Applies a bitwise or between left hand side and right hand side storing the result in the left hand side
            </summary>
        </member>
        <member name="F:NightlyCode.Scripting.Data.Operator.XorAssign">
            <summary>
            Applies a bitwise xor between left hand side and right hand side storing the result in the left hand side
            </summary>
        </member>
        <member name="F:NightlyCode.Scripting.Data.Operator.SingleLineComment">
            <summary>
            marks all characters until the next linebreak as a comment
            </summary>
        </member>
        <member name="F:NightlyCode.Scripting.Data.Operator.MultilineComment">
            <summary>
            marks all characters until a multiline comment terminator as a comment
            </summary>
        </member>
        <member name="T:NightlyCode.Scripting.Data.OperatorIndex">
            <summary>
            index of an operator in a token list
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Data.OperatorIndex.#ctor(System.Int32,NightlyCode.Scripting.Operations.IOperator)">
            <summary>
            creates a new <see cref="T:NightlyCode.Scripting.Data.OperatorIndex"/>
            </summary>
            <param name="index">index where operator is located</param>
            <param name="token">operator token</param>
        </member>
        <member name="P:NightlyCode.Scripting.Data.OperatorIndex.Index">
            <summary>
            index where operator is located
            </summary>
        </member>
        <member name="P:NightlyCode.Scripting.Data.OperatorIndex.Token">
            <summary>
            operator token
            </summary>
        </member>
        <member name="T:NightlyCode.Scripting.Data.Variable">
            <summary>
            variable data
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Data.Variable.#ctor(System.String,System.Object)">
            <summary>
            creates a new <see cref="T:NightlyCode.Scripting.Data.Variable"/>
            </summary>
            <param name="name">name of variable</param>
            <param name="value">value value (optional)</param>
        </member>
        <member name="P:NightlyCode.Scripting.Data.Variable.Name">
            <summary>
            name of variable
            </summary>
        </member>
        <member name="P:NightlyCode.Scripting.Data.Variable.Value">
            <summary>
            variable value
            </summary>
        </member>
        <member name="T:NightlyCode.Scripting.Errors.ScriptException">
            <summary>
            exception related to script engine
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Errors.ScriptException.#ctor(System.String)">
            <summary>
            creates a new <see cref="T:NightlyCode.Scripting.Errors.ScriptException"/>
            </summary>
            <param name="message">error message</param>
        </member>
        <member name="M:NightlyCode.Scripting.Errors.ScriptException.#ctor(System.String,System.Exception)">
            <summary>
            creates a new <see cref="T:NightlyCode.Scripting.Errors.ScriptException"/>
            </summary>
            <param name="message">error message</param>
            <param name="innerException">exception which lead to exception</param>
        </member>
        <member name="T:NightlyCode.Scripting.Errors.ScriptExecutionException">
            <summary>
            error thrown by script
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Errors.ScriptExecutionException.#ctor(System.String,System.Object)">
            <summary>
            creates a new <see cref="T:NightlyCode.Scripting.Errors.ScriptException"/>
            </summary>
            <param name="message">error message</param>
            <param name="data">context data providing info for error</param>
        </member>
        <member name="M:NightlyCode.Scripting.Errors.ScriptExecutionException.#ctor(System.String,System.Exception,System.Object)">
            <summary>
            creates a new <see cref="T:NightlyCode.Scripting.Errors.ScriptException"/>
            </summary>
            <param name="message">error message</param>
            <param name="innerException">exception which led to this error</param>
            <param name="data">context data providing info for error</param>
        </member>
        <member name="P:NightlyCode.Scripting.Errors.ScriptExecutionException.ContextData">
            <summary>
            context data
            </summary>
        </member>
        <member name="T:NightlyCode.Scripting.Errors.ScriptParserException">
            <summary>
            exception triggered when parser is unable to parse script
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Errors.ScriptParserException.#ctor(System.String)">
            <summary>
            creates a new <see cref="T:NightlyCode.Scripting.Errors.ScriptParserException"/>
            </summary>
            <param name="message">error message</param>
        </member>
        <member name="M:NightlyCode.Scripting.Errors.ScriptParserException.#ctor(System.String,System.Exception)">
            <summary>
            creates a new <see cref="T:NightlyCode.Scripting.Errors.ScriptParserException"/>
            </summary>
            <param name="message">error message</param>
            <param name="innerException">exception which triggered this error</param>
        </member>
        <member name="T:NightlyCode.Scripting.Errors.ScriptRuntimeException">
            <summary>
            exception triggered when an error was encountered parsing or executing a script
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Errors.ScriptRuntimeException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            creates a new <see cref="T:NightlyCode.Scripting.Errors.ScriptRuntimeException"/>
            </summary>
            <param name="message">error message</param>
            <param name="details">details for error</param>
            <param name="innerException">error which lead to this error</param>
        </member>
        <member name="P:NightlyCode.Scripting.Errors.ScriptRuntimeException.Details">
            <summary>
            details for error
            </summary>
        </member>
        <member name="T:NightlyCode.Scripting.Extensions.OperatorExtensions">
            <summary>
            extensions for comparator tokens
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Extensions.OperatorExtensions.GetOrderNumber(NightlyCode.Scripting.Data.Operator)">
            <summary>
            get number used to sort operator by priority
            </summary>
            <param name="operator">operator to sort</param>
            <returns>number used in sorting algorithm</returns>
        </member>
        <member name="T:NightlyCode.Scripting.Extensions.ScriptCode">
            <summary>
            helper method for script code
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Extensions.ScriptCode.Create(System.String[])">
            <summary>
            creates scriptcode by joining the lines to a single script
            </summary>
            <param name="lines">script code lines</param>
            <returns>script code</returns>
        </member>
        <member name="T:NightlyCode.Scripting.Extensions.ValueExtensions">
            <summary>
            extensions for values
            </summary>
        </member>
        <member name="T:NightlyCode.Scripting.Extern.ConversionKey">
            <summary>
            key used for specific conversion
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Extern.ConversionKey.#ctor(System.Type,System.Type)">
            <summary>
            ctor
            </summary>
            <param name="sourcetype"></param>
            <param name="targettype"></param>
        </member>
        <member name="P:NightlyCode.Scripting.Extern.ConversionKey.SourceType">
            <summary>
            source type from which to convert
            </summary>
        </member>
        <member name="P:NightlyCode.Scripting.Extern.ConversionKey.TargetType">
            <summary>
            target type to which to convert
            </summary>
        </member>
        <member name="T:NightlyCode.Scripting.Extern.Converter">
            <summary>
            converter used to convert data types
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Extern.Converter.#cctor">
            <summary>
            cctor
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Extern.Converter.RegisterConverter(NightlyCode.Scripting.Extern.ConversionKey,System.Func{System.Object,System.Object})">
            <summary>
            registers a specific converter to be used for a specific conversion
            </summary>
            <param name="key"></param>
            <param name="converter"></param>
        </member>
        <member name="M:NightlyCode.Scripting.Extern.Converter.Convert(System.Object,System.Type,System.Boolean)">
            <summary>
            converts the value to a specific target type
            </summary>
            <param name="value"></param>
            <param name="targettype"></param>
            <param name="allownullonvaluetypes"> </param>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Scripting.Extern.Converter.Convert``1(System.Object,System.Boolean)">
            <summary>
            converts the value to the specified target type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="allownullonvaluetypes"> </param>
            <returns></returns>
        </member>
        <member name="T:NightlyCode.Scripting.IScript">
            <summary>
            interface for a script
            </summary>
            <remarks>does the same as <see cref="T:NightlyCode.Scripting.Tokens.IScriptToken"/> but has a more clear name</remarks>
        </member>
        <member name="M:NightlyCode.Scripting.IScript.Execute(NightlyCode.Scripting.Data.Variable[])">
            <summary>
            executes the script and returns the result
            </summary>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Scripting.IScript.Execute``1(NightlyCode.Scripting.Data.Variable[])">
            <summary>
            executes the script and returns a typed result
            </summary>
            <remarks>
            this just executes <see cref="M:NightlyCode.Scripting.IScript.Execute(NightlyCode.Scripting.Data.Variable[])"/> and tries to convert the result
            </remarks>
            <typeparam name="T">type of result to return</typeparam>
            <returns>result of script execution</returns>
        </member>
        <member name="T:NightlyCode.Scripting.Operations.AssignableToken">
            <summary>
            base implementation which handles errors
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Operations.AssignableToken.Assign(NightlyCode.Scripting.Tokens.IScriptToken,NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
        <member name="M:NightlyCode.Scripting.Operations.AssignableToken.AssignToken(NightlyCode.Scripting.Tokens.IScriptToken,NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <summary>
            executes assignment
            </summary>
            <param name="token">token with value to assign</param>
            <returns>result of assignment</returns>
        </member>
        <member name="T:NightlyCode.Scripting.Operations.Assign.AddAssign">
            <summary>
            adds a value to the result of a token and assigns it at the same time
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Assign.AddAssign.Compute(NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
        <member name="P:NightlyCode.Scripting.Operations.Assign.AddAssign.Operator">
            <inheritdoc />
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Assign.AddAssign.ToString">
            <inheritdoc />
        </member>
        <member name="T:NightlyCode.Scripting.Operations.Assign.AndAssign">
            <summary>
            computes bitwise and of lhs and rhs and assigns the result to lhs
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Assign.AndAssign.Compute(NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
        <member name="P:NightlyCode.Scripting.Operations.Assign.AndAssign.Operator">
            <inheritdoc />
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Assign.AndAssign.ToString">
            <inheritdoc />
        </member>
        <member name="T:NightlyCode.Scripting.Operations.Assign.Assignment">
            <summary>
            assignment in a script
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Assign.Assignment.ExecuteToken(NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Assign.Assignment.AssignToken(NightlyCode.Scripting.Tokens.IScriptToken,NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
        <member name="P:NightlyCode.Scripting.Operations.Assign.Assignment.Lhs">
            <inheritdoc />
        </member>
        <member name="P:NightlyCode.Scripting.Operations.Assign.Assignment.Rhs">
            <inheritdoc />
        </member>
        <member name="P:NightlyCode.Scripting.Operations.Assign.Assignment.Operator">
            <inheritdoc />
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Assign.Assignment.ToString">
            <inheritdoc />
        </member>
        <member name="T:NightlyCode.Scripting.Operations.Assign.DivAssign">
            <summary>
            divides a value by the result of a token and assigns it to the same token
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Assign.DivAssign.Compute(NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
        <member name="P:NightlyCode.Scripting.Operations.Assign.DivAssign.Operator">
            <inheritdoc />
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Assign.DivAssign.ToString">
            <inheritdoc />
        </member>
        <member name="T:NightlyCode.Scripting.Operations.Assign.ModAssign">
            <summary>
            computes modulus of a value with the result of a token and assigns it to the same token
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Assign.ModAssign.Compute(NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
        <member name="P:NightlyCode.Scripting.Operations.Assign.ModAssign.Operator">
            <inheritdoc />
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Assign.ModAssign.ToString">
            <inheritdoc />
        </member>
        <member name="T:NightlyCode.Scripting.Operations.Assign.MulAssign">
            <summary>
            multiplies a value from the result of a token and assigns it to the same token
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Assign.MulAssign.Compute(NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
        <member name="P:NightlyCode.Scripting.Operations.Assign.MulAssign.Operator">
            <inheritdoc />
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Assign.MulAssign.ToString">
            <inheritdoc />
        </member>
        <member name="T:NightlyCode.Scripting.Operations.Assign.OperatorAssign">
            <summary>
            computes the result of a binary operation and assigns the result to lhs
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Assign.OperatorAssign.Compute(NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <summary>
            computes the result of the operation
            </summary>
            <returns></returns>
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Assign.OperatorAssign.ExecuteToken(NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
        <member name="P:NightlyCode.Scripting.Operations.Assign.OperatorAssign.Lhs">
            <inheritdoc />
        </member>
        <member name="P:NightlyCode.Scripting.Operations.Assign.OperatorAssign.Rhs">
            <inheritdoc />
        </member>
        <member name="P:NightlyCode.Scripting.Operations.Assign.OperatorAssign.Operator">
            <inheritdoc />
        </member>
        <member name="T:NightlyCode.Scripting.Operations.Assign.OrAssign">
            <summary>
            computes bitwise and of lhs and rhs and assigns the result to lhs
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Assign.OrAssign.Compute(NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
        <member name="P:NightlyCode.Scripting.Operations.Assign.OrAssign.Operator">
            <inheritdoc />
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Assign.OrAssign.ToString">
            <inheritdoc />
        </member>
        <member name="T:NightlyCode.Scripting.Operations.Assign.ShlAssign">
            <summary>
            shifts bits of a value to the left by the result of a token and assigns it to the same token
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Assign.ShlAssign.Compute(NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
        <member name="P:NightlyCode.Scripting.Operations.Assign.ShlAssign.Operator">
            <inheritdoc />
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Assign.ShlAssign.ToString">
            <inheritdoc />
        </member>
        <member name="T:NightlyCode.Scripting.Operations.Assign.ShrAssign">
            <summary>
            shifts bits of a value to the right by the result of a token and assigns it to the same token
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Assign.ShrAssign.Compute(NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
        <member name="P:NightlyCode.Scripting.Operations.Assign.ShrAssign.Operator">
            <inheritdoc />
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Assign.ShrAssign.ToString">
            <inheritdoc />
        </member>
        <member name="T:NightlyCode.Scripting.Operations.Assign.SubAssign">
            <summary>
            subtracts a value from the result of a token and assigns it to the same token
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Assign.SubAssign.Compute(NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
        <member name="P:NightlyCode.Scripting.Operations.Assign.SubAssign.Operator">
            <inheritdoc />
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Assign.SubAssign.ToString">
            <inheritdoc />
        </member>
        <member name="T:NightlyCode.Scripting.Operations.Assign.XorAssign">
            <summary>
            computes bitwise and of lhs and rhs and assigns the result to lhs
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Assign.XorAssign.Compute(NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
        <member name="P:NightlyCode.Scripting.Operations.Assign.XorAssign.Operator">
            <inheritdoc />
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Assign.XorAssign.ToString">
            <inheritdoc />
        </member>
        <member name="T:NightlyCode.Scripting.Operations.Comparision.Comparator">
            <summary>
            operator used to compare two values resulting in a boolean
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Comparision.Comparator.Compare(System.Object,System.Object,NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <summary>
            compares lhs and rhs and returns value of comparision
            </summary>
            <returns>comparision value</returns>
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Comparision.Comparator.ExecuteToken(NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
        <member name="P:NightlyCode.Scripting.Operations.Comparision.Comparator.Lhs">
            <inheritdoc />
        </member>
        <member name="P:NightlyCode.Scripting.Operations.Comparision.Comparator.Rhs">
            <inheritdoc />
        </member>
        <member name="P:NightlyCode.Scripting.Operations.Comparision.Comparator.Operator">
            <inheritdoc />
        </member>
        <member name="T:NightlyCode.Scripting.Operations.Comparision.Equal">
            <summary>
            compares two values for equality
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Comparision.Equal.Compare(System.Object,System.Object,NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
        <member name="P:NightlyCode.Scripting.Operations.Comparision.Equal.Operator">
            <inheritdoc />
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Comparision.Equal.ToString">
            <inheritdoc />
        </member>
        <member name="T:NightlyCode.Scripting.Operations.Comparision.Greater">
            <summary>
            compares whether lhs is less than rhs
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Comparision.Greater.Compare(System.Object,System.Object,NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
        <member name="P:NightlyCode.Scripting.Operations.Comparision.Greater.Operator">
            <inheritdoc />
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Comparision.Greater.ToString">
            <inheritdoc />
        </member>
        <member name="T:NightlyCode.Scripting.Operations.Comparision.GreaterOrEqual">
            <summary>
            compares whether lhs is less than rhs
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Comparision.GreaterOrEqual.Compare(System.Object,System.Object,NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
        <member name="P:NightlyCode.Scripting.Operations.Comparision.GreaterOrEqual.Operator">
            <inheritdoc />
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Comparision.GreaterOrEqual.ToString">
            <inheritdoc />
        </member>
        <member name="T:NightlyCode.Scripting.Operations.Comparision.Less">
            <summary>
            compares whether lhs is less than rhs
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Comparision.Less.Compare(System.Object,System.Object,NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
        <member name="P:NightlyCode.Scripting.Operations.Comparision.Less.Operator">
            <inheritdoc />
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Comparision.Less.ToString">
            <inheritdoc />
        </member>
        <member name="T:NightlyCode.Scripting.Operations.Comparision.LessOrEqual">
            <summary>
            compares whether lhs is less than rhs
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Comparision.LessOrEqual.Compare(System.Object,System.Object,NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
        <member name="P:NightlyCode.Scripting.Operations.Comparision.LessOrEqual.Operator">
            <inheritdoc />
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Comparision.LessOrEqual.ToString">
            <inheritdoc />
        </member>
        <member name="T:NightlyCode.Scripting.Operations.Comparision.Matches">
            <summary>
            determines whether a string matches a regex
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Comparision.Matches.Compare(System.Object,System.Object,NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
        <member name="P:NightlyCode.Scripting.Operations.Comparision.Matches.Operator">
            <inheritdoc />
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Comparision.Matches.ToString">
            <inheritdoc />
        </member>
        <member name="T:NightlyCode.Scripting.Operations.Comparision.MatchesNot">
            <summary>
            determines whether a string matches a regex
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Comparision.MatchesNot.Compare(System.Object,System.Object,NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
        <member name="P:NightlyCode.Scripting.Operations.Comparision.MatchesNot.Operator">
            <inheritdoc />
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Comparision.MatchesNot.ToString">
            <inheritdoc />
        </member>
        <member name="T:NightlyCode.Scripting.Operations.Comparision.NotEqual">
            <summary>
            compares two values whether they are not equal
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Comparision.NotEqual.Compare(System.Object,System.Object,NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
        <member name="P:NightlyCode.Scripting.Operations.Comparision.NotEqual.Operator">
            <inheritdoc />
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Comparision.NotEqual.ToString">
            <inheritdoc />
        </member>
        <member name="T:NightlyCode.Scripting.Operations.IAssignableToken">
            <summary>
            token to which a value can be assigned
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Operations.IAssignableToken.Assign(NightlyCode.Scripting.Tokens.IScriptToken,NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <summary>
            assigns a value to this token
            </summary>
            <param name="token">token resulting in value to assign to this token</param>
            <returns>resulting value after assignment</returns>
        </member>
        <member name="T:NightlyCode.Scripting.Operations.IBinaryToken">
            <summary>
            token applying an operation to two operands
            </summary>
        </member>
        <member name="P:NightlyCode.Scripting.Operations.IBinaryToken.Lhs">
            <summary>
            left hand side operand
            </summary>
        </member>
        <member name="P:NightlyCode.Scripting.Operations.IBinaryToken.Rhs">
            <summary>
            right hand side operand
            </summary>
        </member>
        <member name="T:NightlyCode.Scripting.Operations.IOperator">
            <summary>
            scripttoken which operates on other tokens
            </summary>
        </member>
        <member name="P:NightlyCode.Scripting.Operations.IOperator.Operator">
            <summary>
            type of operator
            </summary>
        </member>
        <member name="T:NightlyCode.Scripting.Operations.IUnaryToken">
            <summary>
            token applying an operation to a single operand
            </summary>
        </member>
        <member name="P:NightlyCode.Scripting.Operations.IUnaryToken.IsPostToken">
            <summary>
            determines whether the operand is ahead of this token or behind it
            </summary>
        </member>
        <member name="P:NightlyCode.Scripting.Operations.IUnaryToken.Operand">
            <summary>
            operand for operation
            </summary>
        </member>
        <member name="T:NightlyCode.Scripting.Operations.Logic.LogicAnd">
            <summary>
            computes logical AND of lhs and rhs
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Logic.LogicAnd.Operate(NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
        <member name="P:NightlyCode.Scripting.Operations.Logic.LogicAnd.Operator">
            <inheritdoc />
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Logic.LogicAnd.ToString">
            <inheritdoc />
        </member>
        <member name="T:NightlyCode.Scripting.Operations.Logic.LogicOperation">
            <summary>
            logic operation on boolean operands
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Logic.LogicOperation.Operate(NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <summary>
            executes the logic operation
            </summary>
            <returns>result of logic operation</returns>
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Logic.LogicOperation.ExecuteToken(NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
        <member name="P:NightlyCode.Scripting.Operations.Logic.LogicOperation.Lhs">
            <inheritdoc />
        </member>
        <member name="P:NightlyCode.Scripting.Operations.Logic.LogicOperation.Rhs">
            <inheritdoc />
        </member>
        <member name="P:NightlyCode.Scripting.Operations.Logic.LogicOperation.Operator">
            <inheritdoc />
        </member>
        <member name="T:NightlyCode.Scripting.Operations.Logic.LogicOr">
            <summary>
            computes logical OR of lhs and rhs
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Logic.LogicOr.Operate(NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
        <member name="P:NightlyCode.Scripting.Operations.Logic.LogicOr.Operator">
            <inheritdoc />
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Logic.LogicOr.ToString">
            <inheritdoc />
        </member>
        <member name="T:NightlyCode.Scripting.Operations.Logic.LogicXor">
            <summary>
            computes logical XOR of lhs and rhs
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Logic.LogicXor.Operate(NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
        <member name="P:NightlyCode.Scripting.Operations.Logic.LogicXor.Operator">
            <inheritdoc />
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Logic.LogicXor.ToString">
            <inheritdoc />
        </member>
        <member name="T:NightlyCode.Scripting.Operations.MethodOperations">
            <summary>
            operations used when calling methods dynamically
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Operations.MethodOperations.MatchesParameterCount(System.Reflection.MethodBase,NightlyCode.Scripting.Tokens.IScriptToken[],System.Boolean)">
            <summary>
            determines whether a method could be called using the provided parameters 
            </summary>
            <remarks>
            this does not determine whether the parameter types actually matches, it only determines whether the parameter count matches
            </remarks>
            <param name="method">method to check</param>
            <param name="parameters">specified script parameters</param>
            <param name="isextension">determines whether the method is an extension method</param>
            <returns>true if method count matches, false otherwise</returns>
        </member>
        <member name="M:NightlyCode.Scripting.Operations.MethodOperations.CallConstructor(System.Reflection.ConstructorInfo,NightlyCode.Scripting.Tokens.IScriptToken[],NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <summary>
            calls a constructor using the specified parameters
            </summary>
            <param name="constructor">constructor to call</param>
            <param name="parameters">parameters for constructor</param>
            <returns></returns>
        </member>
        <member name="T:NightlyCode.Scripting.Operations.Unary.Complement">
            <summary>
            computes the bit-complement of the result of a token
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Unary.Complement.ExecuteToken(NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
        <member name="P:NightlyCode.Scripting.Operations.Unary.Complement.Operator">
            <inheritdoc />
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Unary.Complement.ToString">
            <inheritdoc />
        </member>
        <member name="T:NightlyCode.Scripting.Operations.Unary.Decrement">
            <summary>
            increments the value of a token by 1
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Unary.Decrement.#ctor(System.Boolean)">
            <summary>
            creates a new <see cref="T:NightlyCode.Scripting.Operations.Unary.Decrement"/>
            </summary>
            <param name="post">determines whether this is a post-increment or a pre-increment</param>
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Unary.Decrement.ExecuteToken(NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
        <member name="P:NightlyCode.Scripting.Operations.Unary.Decrement.IsPostToken">
            <inheritdoc />
        </member>
        <member name="P:NightlyCode.Scripting.Operations.Unary.Decrement.Operand">
            <inheritdoc />
        </member>
        <member name="P:NightlyCode.Scripting.Operations.Unary.Decrement.Operator">
            <inheritdoc />
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Unary.Decrement.ToString">
            <inheritdoc />
        </member>
        <member name="T:NightlyCode.Scripting.Operations.Unary.Increment">
            <summary>
            increments the value of a token by 1
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Unary.Increment.#ctor(System.Boolean)">
            <summary>
            creates a new <see cref="T:NightlyCode.Scripting.Operations.Unary.Increment"/>
            </summary>
            <param name="post">determines whether this is a post-increment or a pre-increment</param>
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Unary.Increment.ExecuteToken(NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
        <member name="P:NightlyCode.Scripting.Operations.Unary.Increment.IsPostToken">
            <inheritdoc />
        </member>
        <member name="P:NightlyCode.Scripting.Operations.Unary.Increment.Operand">
            <inheritdoc />
        </member>
        <member name="P:NightlyCode.Scripting.Operations.Unary.Increment.Operator">
            <inheritdoc />
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Unary.Increment.ToString">
            <inheritdoc />
        </member>
        <member name="T:NightlyCode.Scripting.Operations.Unary.Negate">
            <summary>
            negates the value of a token
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Unary.Negate.ExecuteToken(NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
        <member name="P:NightlyCode.Scripting.Operations.Unary.Negate.Operator">
            <inheritdoc />
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Unary.Negate.ToString">
            <inheritdoc />
        </member>
        <member name="T:NightlyCode.Scripting.Operations.Unary.Not">
            <summary>
            logical negation of boolean values
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Unary.Not.ExecuteToken(NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
        <member name="P:NightlyCode.Scripting.Operations.Unary.Not.Operator">
            <inheritdoc />
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Unary.Not.ToString">
            <inheritdoc />
        </member>
        <member name="T:NightlyCode.Scripting.Operations.Unary.UnaryOperator">
            <summary>
            operator which acts on a single operand which is usually following the operator
            </summary>
        </member>
        <member name="P:NightlyCode.Scripting.Operations.Unary.UnaryOperator.IsPostToken">
            <inheritdoc />
        </member>
        <member name="P:NightlyCode.Scripting.Operations.Unary.UnaryOperator.Operand">
            <inheritdoc />
        </member>
        <member name="P:NightlyCode.Scripting.Operations.Unary.UnaryOperator.Operator">
            <inheritdoc />
        </member>
        <member name="T:NightlyCode.Scripting.Operations.Values.Addition">
            <summary>
            adds two values or concatenates two strings
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Values.Addition.Operate(System.Object,System.Object,NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
        <member name="P:NightlyCode.Scripting.Operations.Values.Addition.Operator">
            <inheritdoc />
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Values.Addition.ToString">
            <inheritdoc />
        </member>
        <member name="T:NightlyCode.Scripting.Operations.Values.BitwiseAnd">
            <summary>
            executes a bitwise and on two integer values
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Values.BitwiseAnd.Operate(System.Object,System.Object,NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
        <member name="P:NightlyCode.Scripting.Operations.Values.BitwiseAnd.Operator">
            <inheritdoc />
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Values.BitwiseAnd.ToString">
            <inheritdoc />
        </member>
        <member name="T:NightlyCode.Scripting.Operations.Values.BitwiseOr">
            <summary>
            executes a bitwise OR on two integer values
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Values.BitwiseOr.Operate(System.Object,System.Object,NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
        <member name="P:NightlyCode.Scripting.Operations.Values.BitwiseOr.Operator">
            <inheritdoc />
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Values.BitwiseOr.ToString">
            <inheritdoc />
        </member>
        <member name="T:NightlyCode.Scripting.Operations.Values.BitwiseXor">
            <summary>
            executes a bitwise XOR on two integer values
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Values.BitwiseXor.Operate(System.Object,System.Object,NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
        <member name="P:NightlyCode.Scripting.Operations.Values.BitwiseXor.Operator">
            <inheritdoc />
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Values.BitwiseXor.ToString">
            <inheritdoc />
        </member>
        <member name="T:NightlyCode.Scripting.Operations.Values.Division">
            <summary>
            divides LHS by RHS
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Values.Division.Operate(System.Object,System.Object,NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
        <member name="P:NightlyCode.Scripting.Operations.Values.Division.Operator">
            <inheritdoc />
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Values.Division.ToString">
            <inheritdoc />
        </member>
        <member name="T:NightlyCode.Scripting.Operations.Values.Modulo">
            <summary>
            computes the modulus when dividing LHS by RHS
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Values.Modulo.Operate(System.Object,System.Object,NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
        <member name="P:NightlyCode.Scripting.Operations.Values.Modulo.Operator">
            <inheritdoc />
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Values.Modulo.ToString">
            <inheritdoc />
        </member>
        <member name="T:NightlyCode.Scripting.Operations.Values.Multiplication">
            <summary>
            multiplies two values
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Values.Multiplication.Operate(System.Object,System.Object,NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
        <member name="P:NightlyCode.Scripting.Operations.Values.Multiplication.Operator">
            <inheritdoc />
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Values.Multiplication.ToString">
            <inheritdoc />
        </member>
        <member name="T:NightlyCode.Scripting.Operations.Values.RolLeft">
            <summary>
            rolls bits of lhs to the left by rhs steps
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Values.RolLeft.Operate(System.Object,System.Object,NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
        <member name="P:NightlyCode.Scripting.Operations.Values.RolLeft.Operator">
            <inheritdoc />
        </member>
        <member name="T:NightlyCode.Scripting.Operations.Values.RolRight">
            <summary>
            rolls bits of lhs to the left by rhs steps
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Values.RolRight.Operate(System.Object,System.Object,NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
        <member name="P:NightlyCode.Scripting.Operations.Values.RolRight.Operator">
            <inheritdoc />
        </member>
        <member name="T:NightlyCode.Scripting.Operations.Values.ShiftLeft">
            <summary>
            shifts the bits of LHS by RHS to the left
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Values.ShiftLeft.Operate(System.Object,System.Object,NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
        <member name="P:NightlyCode.Scripting.Operations.Values.ShiftLeft.Operator">
            <inheritdoc />
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Values.ShiftLeft.ToString">
            <inheritdoc />
        </member>
        <member name="T:NightlyCode.Scripting.Operations.Values.ShiftRight">
            <summary>
            shifts the bits of LHS by RHS to the right
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Values.ShiftRight.Operate(System.Object,System.Object,NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
        <member name="P:NightlyCode.Scripting.Operations.Values.ShiftRight.Operator">
            <inheritdoc />
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Values.ShiftRight.ToString">
            <inheritdoc />
        </member>
        <member name="T:NightlyCode.Scripting.Operations.Values.Subtraction">
            <summary>
            subtracts a RHS from LHS
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Values.Subtraction.Operate(System.Object,System.Object,NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
        <member name="P:NightlyCode.Scripting.Operations.Values.Subtraction.Operator">
            <inheritdoc />
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Values.Subtraction.ToString">
            <inheritdoc />
        </member>
        <member name="T:NightlyCode.Scripting.Operations.Values.ValueOperation">
            <summary>
            arithmetic operation to apply to two operands
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Values.ValueOperation.Operate(System.Object,System.Object,NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <summary>
            executes the value operation
            </summary>
            <returns>result of operation</returns>
        </member>
        <member name="M:NightlyCode.Scripting.Operations.Values.ValueOperation.ExecuteToken(NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
        <member name="P:NightlyCode.Scripting.Operations.Values.ValueOperation.Operator">
            <inheritdoc />
        </member>
        <member name="P:NightlyCode.Scripting.Operations.Values.ValueOperation.Lhs">
            <inheritdoc />
        </member>
        <member name="P:NightlyCode.Scripting.Operations.Values.ValueOperation.Rhs">
            <inheritdoc />
        </member>
        <member name="T:NightlyCode.Scripting.Parser.ExtensionProvider">
            <summary>
            plain implementation of <see cref="T:NightlyCode.Scripting.Parser.IExtensionProvider"/> providing hosts and extension methods
            </summary>
        </member>
        <member name="P:NightlyCode.Scripting.Parser.ExtensionProvider.Item(System.Type)">
            <summary>
            indexer for extension methods
            </summary>
            <param name="host">host type for which to get extension methods</param>
            <returns>available extension methods</returns>
        </member>
        <member name="M:NightlyCode.Scripting.Parser.ExtensionProvider.AddExtensionMethod(System.Type,System.Reflection.MethodInfo)">
            <summary>
            adds an extension method to the script pool
            </summary>
            <param name="hosttype">type of host for which to add extension</param>
            <param name="method">method to add</param>
        </member>
        <member name="M:NightlyCode.Scripting.Parser.ExtensionProvider.AddExtensions``1">
            <summary>
            adds methods of an extension type
            </summary>
            <typeparam name="T">type of which to add extension methods</typeparam>
        </member>
        <member name="M:NightlyCode.Scripting.Parser.ExtensionProvider.AddExtensions(System.Type)">
            <summary>
            adds methods of an extension type
            </summary>
            <param name="extensiontype">type of which to add extension methods</param>
        </member>
        <member name="M:NightlyCode.Scripting.Parser.ExtensionProvider.GetExtensions(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:NightlyCode.Scripting.Parser.IExtensionProvider">
            <summary>
            interface for a pool of script hosts
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Parser.IExtensionProvider.GetExtensions(System.Type)">
            <summary>
            get extension methods available for type
            </summary>
            <param name="host">type of host for which to get extension methods</param>
            <returns>methods available as extension methods</returns>
        </member>
        <member name="M:NightlyCode.Scripting.Parser.IExtensionProvider.AddExtensions(System.Type)">
            <summary>
            adds methods of an extension type
            </summary>
            <param name="extensiontype">type of which to add extension methods</param>
        </member>
        <member name="M:NightlyCode.Scripting.Parser.IExtensionProvider.AddExtensions``1">
            <summary>
            adds methods of an extension type
            </summary>
            <typeparam name="T">type of which to add extension methods</typeparam>
        </member>
        <member name="T:NightlyCode.Scripting.Parser.IScriptParser">
            <summary>
            interface for a parser of script code
            </summary>
        </member>
        <member name="P:NightlyCode.Scripting.Parser.IScriptParser.Extensions">
            <summary>
            access to extensions available to script environment
            </summary>
        </member>
        <member name="P:NightlyCode.Scripting.Parser.IScriptParser.Types">
            <summary>
            access to types which can be created using 'new' keyword
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Parser.IScriptParser.Parse(System.String,NightlyCode.Scripting.Data.Variable[])">
            <summary>
            parses a script for execution
            </summary>
            <param name="data">data to parse</param>
            <param name="variables">variables valid for this script (flagged as read-only)</param>
            <returns>script which can get executed</returns>
        </member>
        <member name="E:NightlyCode.Scripting.Parser.IScriptParser.TokenParsed">
            <summary>
            triggered when a token was parsed
            </summary>
        </member>
        <member name="T:NightlyCode.Scripting.Parser.ITypeInstanceProvider">
            <summary>
            interface for a provider of type-instances
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Parser.ITypeInstanceProvider.Create(NightlyCode.Scripting.Tokens.IScriptToken[],NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <summary>
            creates an instance using the specified parameters
            </summary>
            <param name="parameters">parameters to use to create the instance</param>
            <returns>created instance</returns>
        </member>
        <member name="T:NightlyCode.Scripting.Parser.ITypeProvider">
            <summary>
            provides types which can be created in script
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Parser.ITypeProvider.GetType(System.String)">
            <summary>
            get type instance provider which is registered under the specified name
            </summary>
            <param name="name">name of type to get</param>
            <returns>instance provider for requested type</returns>
        </member>
        <member name="M:NightlyCode.Scripting.Parser.ITypeProvider.AddType(System.String,NightlyCode.Scripting.Parser.ITypeInstanceProvider)">
            <summary>
            adds an instance provider for a type
            </summary>
            <param name="name">name of type to add</param>
            <param name="provider">instance provider</param>
        </member>
        <member name="M:NightlyCode.Scripting.Parser.ITypeProvider.AddType``1(System.String)">
            <summary>
            adds a type using a type provider calling existing constructors
            </summary>
            <typeparam name="T">type to create</typeparam>
            <param name="name">name to use to create type</param>
        </member>
        <member name="M:NightlyCode.Scripting.Parser.ITypeProvider.RemoveType(System.String)">
            <summary>
            removes the specified type instance provider
            </summary>
            <param name="name">name of type to remove</param>
        </member>
        <member name="T:NightlyCode.Scripting.Parser.IVariableContext">
            <summary>
            provides a context which contains writable variables
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Parser.IVariableContext.Clear">
            <summary>
            clears all variable entries
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Parser.IVariableContext.SetVariable(System.String,System.Object)">
            <summary>
            set a value of a variable
            </summary>
            <param name="name">variable name</param>
            <param name="value">value to set</param>
        </member>
        <member name="T:NightlyCode.Scripting.Parser.IVariableProvider">
            <summary>
            provides named variables to script
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Parser.IVariableProvider.GetVariable(System.String)">
            <summary>
            get value of a variable
            </summary>
            <param name="name">name of variable</param>
            <returns>variable value</returns>
        </member>
        <member name="M:NightlyCode.Scripting.Parser.IVariableProvider.ContainsVariable(System.String)">
            <summary>
            determines whether the context contains a variable with the specified name
            </summary>
            <param name="name">name of variable to check for</param>
            <returns>true if variable is in this context, false otherwise</returns>
        </member>
        <member name="M:NightlyCode.Scripting.Parser.IVariableProvider.GetProvider(System.String)">
            <summary>
            get provider in chain which contains a variable with the specified name
            </summary>
            <param name="variable">name of variable to check for</param>
            <returns>next provider which contains this variable, null if the variable is not found</returns>
        </member>
        <member name="T:NightlyCode.Scripting.Parser.Operators.OperatorNode">
            <summary>
            node in an operator tree
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Parser.Operators.OperatorNode.#ctor(System.Char)">
            <summary>
            creates a new <see cref="T:NightlyCode.Scripting.Parser.Operators.OperatorNode"/>
            </summary>
            <param name="character">character of node</param>
        </member>
        <member name="P:NightlyCode.Scripting.Parser.Operators.OperatorNode.Item(System.Char)">
            <summary>
            access to children of node
            </summary>
            <param name="character">character identifying the child</param>
            <returns>node mapping to the specified character</returns>
        </member>
        <member name="P:NightlyCode.Scripting.Parser.Operators.OperatorNode.Character">
            <summary>
            character defining the leaf
            </summary>
        </member>
        <member name="P:NightlyCode.Scripting.Parser.Operators.OperatorNode.Operator">
            <summary>
            operator mapped to the node
            </summary>
        </member>
        <member name="P:NightlyCode.Scripting.Parser.Operators.OperatorNode.HasChildren">
            <summary>
            determines whether the operator node has children
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Parser.Operators.OperatorNode.GetChildOrDefault(System.Char)">
            <summary>
            get child if it exists in node or null if no child is found for character
            </summary>
            <param name="character">character leading to the node</param>
            <returns>node if any is found or null</returns>
        </member>
        <member name="T:NightlyCode.Scripting.Parser.Operators.OperatorTree">
            <summary>
            tree containing operator information
            </summary>
        </member>
        <member name="P:NightlyCode.Scripting.Parser.Operators.OperatorTree.Root">
            <summary>
            tree trunk
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Parser.Operators.OperatorTree.Add(System.String,NightlyCode.Scripting.Data.Operator)">
            <summary>
            adds an operator to the tree
            </summary>
            <param name="data">data identifying the operator</param>
            <param name="op">operator type</param>
        </member>
        <member name="M:NightlyCode.Scripting.Parser.Operators.OperatorTree.Get(System.String)">
            <summary>
            get the operator node matching to the data
            </summary>
            <param name="data">data making up the operator</param>
            <returns>node matching the operator data</returns>
        </member>
        <member name="T:NightlyCode.Scripting.Parser.ScriptParser">
            <summary>
            parses scripts from string data
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Parser.ScriptParser.#ctor(NightlyCode.Scripting.Parser.IVariableProvider)">
            <summary>
            creates a new <see cref="T:NightlyCode.Scripting.Parser.ScriptParser"/>
            </summary>
            <param name="globalvariables">provider for global variables</param>
        </member>
        <member name="M:NightlyCode.Scripting.Parser.ScriptParser.#ctor(NightlyCode.Scripting.Data.Variable[])">
            <summary>
            creates a new <see cref="T:NightlyCode.Scripting.Parser.ScriptParser"/>
            </summary>
            <param name="variables">global variables of script parser</param>
        </member>
        <member name="P:NightlyCode.Scripting.Parser.ScriptParser.Extensions">
            <summary>
            access to extensions available to script environment
            </summary>
        </member>
        <member name="P:NightlyCode.Scripting.Parser.ScriptParser.Types">
            <summary>
            access to types which can be created using 'new' keyword
            </summary>
        </member>
        <member name="P:NightlyCode.Scripting.Parser.ScriptParser.MethodResolver">
            <summary>
            resolver which is used by 'import' statement to import methods
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Parser.ScriptParser.Parse(System.String,NightlyCode.Scripting.Data.Variable[])">
            <summary>
            parses a script for execution
            </summary>
            <param name="data">data to parse</param>
            <param name="variables">variables valid for this script (flagged as read-only)</param>
            <returns>script which can get executed</returns>
        </member>
        <member name="E:NightlyCode.Scripting.Parser.ScriptParser.TokenParsed">
            <inheritdoc />
        </member>
        <member name="T:NightlyCode.Scripting.Parser.TokenType">
            <summary>
            token types known to parser
            </summary>
        </member>
        <member name="F:NightlyCode.Scripting.Parser.TokenType.Literal">
            <summary>
            string type
            </summary>
        </member>
        <member name="F:NightlyCode.Scripting.Parser.TokenType.Number">
            <summary>
            number
            </summary>
        </member>
        <member name="F:NightlyCode.Scripting.Parser.TokenType.Variable">
            <summary>
            variable value
            </summary>
        </member>
        <member name="F:NightlyCode.Scripting.Parser.TokenType.Control">
            <summary>
            control specifier
            </summary>
        </member>
        <member name="F:NightlyCode.Scripting.Parser.TokenType.Type">
            <summary>
            registered type
            </summary>
        </member>
        <member name="F:NightlyCode.Scripting.Parser.TokenType.Method">
            <summary>
            method call
            </summary>
        </member>
        <member name="F:NightlyCode.Scripting.Parser.TokenType.Property">
            <summary>
            property
            </summary>
        </member>
        <member name="F:NightlyCode.Scripting.Parser.TokenType.Operator">
            <summary>
            operator
            </summary>
        </member>
        <member name="F:NightlyCode.Scripting.Parser.TokenType.Comment">
            <summary>
            code comment
            </summary>
        </member>
        <member name="T:NightlyCode.Scripting.Parser.TypeProvider">
            <inheritdoc />
        </member>
        <member name="M:NightlyCode.Scripting.Parser.TypeProvider.GetType(System.String)">
            <inheritdoc />
        </member>
        <member name="M:NightlyCode.Scripting.Parser.TypeProvider.AddType(System.String,NightlyCode.Scripting.Parser.ITypeInstanceProvider)">
            <inheritdoc />
        </member>
        <member name="M:NightlyCode.Scripting.Parser.TypeProvider.AddType``1(System.String)">
            <inheritdoc />
        </member>
        <member name="M:NightlyCode.Scripting.Parser.TypeProvider.RemoveType(System.String)">
            <inheritdoc />
        </member>
        <member name="T:NightlyCode.Scripting.Parser.VariableContext">
            <summary>
            simple lookup for variables
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Parser.VariableContext.#ctor(NightlyCode.Scripting.Parser.IVariableProvider,NightlyCode.Scripting.Data.Variable[])">
            <summary>
            creates a new <see cref="T:NightlyCode.Scripting.Parser.VariableContext"/>
            </summary>
            <param name="parentprovider">parent variable context</param>
            <param name="initialvalues">variables to be contained initially in pool</param>
        </member>
        <member name="P:NightlyCode.Scripting.Parser.VariableContext.Item(System.String)">
            <summary>
            indexer for hosts
            </summary>
            <param name="name">name of host to get</param>
            <returns>host instance</returns>
        </member>
        <member name="M:NightlyCode.Scripting.Parser.VariableContext.Clear">
            <inheritdoc />
        </member>
        <member name="M:NightlyCode.Scripting.Parser.VariableContext.SetVariable(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NightlyCode.Scripting.Parser.VariableContext.System#IDisposable#Dispose">
            <inheritdoc />
        </member>
        <member name="T:NightlyCode.Scripting.Parser.VariableProvider">
            <summary>
            basic implementation of a variable provider used if no custom provider is specified
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Parser.VariableProvider.#ctor(NightlyCode.Scripting.Parser.IVariableProvider,NightlyCode.Scripting.Data.Variable[])">
            <summary>
            creates a new <see cref="T:NightlyCode.Scripting.Parser.VariableProvider"/>
            </summary>
            <param name="parentprovider">parent variable scope</param>
            <param name="variables">variables to provide</param>
        </member>
        <member name="P:NightlyCode.Scripting.Parser.VariableProvider.Values">
            <summary>
            access to value lookup
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Parser.VariableProvider.GetVariable(System.String)">
            <inheritdoc />
        </member>
        <member name="M:NightlyCode.Scripting.Parser.VariableProvider.ContainsVariable(System.String)">
            <inheritdoc />
        </member>
        <member name="M:NightlyCode.Scripting.Parser.VariableProvider.GetProvider(System.String)">
            <summary>
            get provider in chain which contains a variable with the specified name
            </summary>
            <param name="variable">name of variable to check for</param>
            <returns>this if this provider contains this variable, null otherwise</returns>
        </member>
        <member name="T:NightlyCode.Scripting.Providers.FileMethodProvider">
            <summary>
            provides external methods from a file path
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Providers.FileMethodProvider.#ctor(NightlyCode.Scripting.Parser.IScriptParser)">
            <summary>
            creates a new <see cref="T:NightlyCode.Scripting.Providers.FileMethodProvider"/>
            </summary>
            <param name="scriptparser">parser used to parse and compile script code</param>
        </member>
        <member name="M:NightlyCode.Scripting.Providers.FileMethodProvider.Import(System.String)">
            <summary>
            loads a script from a file to provide an external method
            </summary>
            <param name="key">path to scriptfile to load and compile</param>
            <returns>compiled script as a external method</returns>
        </member>
        <member name="T:NightlyCode.Scripting.Providers.IExternalMethodProvider">
            <summary>
            interface for an external method provider
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Providers.IExternalMethodProvider.Import(System.String)">
            <summary>
            imports a script method using the specified argument
            </summary>
            <param name="key">key used to identify the method to import</param>
            <returns>loaded from key</returns>
        </member>
        <member name="T:NightlyCode.Scripting.Providers.ResourceScriptMethodProvider">
            <summary>
            provides script methods from assembly resources
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Providers.ResourceScriptMethodProvider.#ctor(System.Reflection.Assembly,NightlyCode.Scripting.Parser.IScriptParser)">
            <summary>
            creates a new <see cref="T:NightlyCode.Scripting.Providers.ResourceScriptMethodProvider"/>
            </summary>
            <param name="assembly">assembly from which to get script resources</param>
            <param name="parser">parser used to parse and compile scripts</param>
        </member>
        <member name="M:NightlyCode.Scripting.Providers.ResourceScriptMethodProvider.Import(System.String)">
            <summary>
            imports an external script method assembly resources
            </summary>
            <param name="key">resource name</param>
            <returns>script method stored in resource</returns>
        </member>
        <member name="T:NightlyCode.Scripting.Providers.TaskMethodProvider">
            <summary>
            provides methods for tasks
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Providers.TaskMethodProvider.WaitAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
            <summary>
            waits for all tasks to complete
            </summary>
            <param name="tasks">tasks to wait for</param>
        </member>
        <member name="T:NightlyCode.Scripting.Providers.TaskProvider">
            <summary>
            provides a method to execute in a thread
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Providers.TaskProvider.Create(NightlyCode.Scripting.Tokens.IScriptToken[],NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
        <member name="T:NightlyCode.Scripting.Providers.TypeInstanceProvider">
            <summary>
            provides instances of arbitrary types
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Providers.TypeInstanceProvider.#ctor(System.Type)">
            <summary>
            creates a new <see cref="T:NightlyCode.Scripting.Providers.TypeInstanceProvider"/>
            </summary>
            <param name="type">type to create</param>
        </member>
        <member name="M:NightlyCode.Scripting.Providers.TypeInstanceProvider.Create(NightlyCode.Scripting.Tokens.IScriptToken[],NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
        <member name="M:NightlyCode.Scripting.Providers.TypeInstanceProvider.ToString">
            <inheritdoc />
        </member>
        <member name="T:NightlyCode.Scripting.Script">
            <summary>
            script parsed by <see cref="T:NightlyCode.Scripting.Parser.ScriptParser"/>
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Script.#ctor(NightlyCode.Scripting.Control.StatementBlock,NightlyCode.Scripting.Parser.IVariableProvider)">
            <summary>
            creates a new <see cref="T:NightlyCode.Scripting.Script"/>
            </summary>
            <param name="script">root token of script to be executed</param>
        </member>
        <member name="M:NightlyCode.Scripting.Script.Execute(NightlyCode.Scripting.Data.Variable[])">
            <inheritdoc />
        </member>
        <member name="M:NightlyCode.Scripting.Script.Execute``1(NightlyCode.Scripting.Data.Variable[])">
            <inheritdoc />
        </member>
        <member name="T:NightlyCode.Scripting.Tokens.ArithmeticBlock">
            <summary>
            block containing an arithmetic evaluation
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Tokens.ArithmeticBlock.ExecuteToken(NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
        <member name="M:NightlyCode.Scripting.Tokens.ArithmeticBlock.ToString">
            <inheritdoc />
        </member>
        <member name="T:NightlyCode.Scripting.Tokens.IScriptToken">
            <summary>
            token of a script which can get executed
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Tokens.IScriptToken.Execute(NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <summary>
            executes the token returning a result
            </summary>
            <returns>result of token call</returns>
        </member>
        <member name="M:NightlyCode.Scripting.Tokens.IScriptToken.Execute``1(NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <summary>
            executes the token returning a result
            </summary>
            <returns>result of token call</returns>
        </member>
        <member name="T:NightlyCode.Scripting.Tokens.NewInstance">
            <summary>
            creates a new instance of a type
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Tokens.NewInstance.ExecuteToken(NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
        <member name="M:NightlyCode.Scripting.Tokens.NewInstance.ToString">
            <inheritdoc />
        </member>
        <member name="T:NightlyCode.Scripting.Tokens.Reference">
            <summary>
            a reference to an assignable token
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Tokens.Reference.#ctor(NightlyCode.Scripting.Operations.IAssignableToken)">
            <summary>
            creates a new <see cref="T:NightlyCode.Scripting.Tokens.Reference"/>
            </summary>
            <param name="argument">argument to use as reference parameter</param>
        </member>
        <member name="M:NightlyCode.Scripting.Tokens.Reference.Execute(NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
        <member name="M:NightlyCode.Scripting.Tokens.Reference.Execute``1(NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
        <member name="M:NightlyCode.Scripting.Tokens.Reference.Assign(NightlyCode.Scripting.Tokens.IScriptToken,NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
        <member name="T:NightlyCode.Scripting.Tokens.ReferenceParameter">
            <summary>
            parameter to use in a reference call
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Tokens.ReferenceParameter.#ctor(System.Int32,NightlyCode.Scripting.Operations.IAssignableToken)">
            <summary>
            creates a new <see cref="T:NightlyCode.Scripting.Tokens.ReferenceParameter"/>
            </summary>
            <param name="index">index of parameter</param>
            <param name="variable">variable to write parameter value to after call</param>
        </member>
        <member name="P:NightlyCode.Scripting.Tokens.ReferenceParameter.Index">
            <summary>
            index of parameter
            </summary>
        </member>
        <member name="P:NightlyCode.Scripting.Tokens.ReferenceParameter.Variable">
            <summary>
            variable to write parameter value to after call
            </summary>
        </member>
        <member name="T:NightlyCode.Scripting.Tokens.ScriptArray">
            <summary>
            token which represents multiple values
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Tokens.ScriptArray.#ctor(NightlyCode.Scripting.Tokens.IScriptToken[])">
            <summary>
            creates a new <see cref="T:NightlyCode.Scripting.Tokens.ScriptArray"/>
            </summary>
            <param name="values">values in array</param>
        </member>
        <member name="M:NightlyCode.Scripting.Tokens.ScriptArray.ExecuteToken(NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
        <member name="M:NightlyCode.Scripting.Tokens.ScriptArray.ToString">
            <inheritdoc />
        </member>
        <member name="T:NightlyCode.Scripting.Tokens.ScriptIndexer">
            <summary>
            indexer call on an object
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Tokens.ScriptIndexer.#ctor(NightlyCode.Scripting.Tokens.IScriptToken,NightlyCode.Scripting.Tokens.IScriptToken[])">
            <summary>
            creates a new <see cref="T:NightlyCode.Scripting.Tokens.ScriptIndexer"/>
            </summary>
            <param name="hosttoken">token representing host</param>
            <param name="parameters">parameters for indexer call</param>
        </member>
        <member name="M:NightlyCode.Scripting.Tokens.ScriptIndexer.ExecuteToken(NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
        <member name="T:NightlyCode.Scripting.Tokens.ScriptMember">
            <summary>
            reads a value from a host member
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Tokens.ScriptMember.#ctor(NightlyCode.Scripting.Tokens.IScriptToken,System.String)">
            <summary>
            creates a new <see cref="T:NightlyCode.Scripting.Tokens.ScriptMember"/>
            </summary>
            <param name="host">host of member</param>
            <param name="membername">name of member to read</param>
        </member>
        <member name="M:NightlyCode.Scripting.Tokens.ScriptMember.ExecuteToken(NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
        <member name="M:NightlyCode.Scripting.Tokens.ScriptMember.ToString">
            <inheritdoc />
        </member>
        <member name="T:NightlyCode.Scripting.Tokens.ScriptMethod">
            <summary>
            calls a method in a script
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Tokens.ScriptMethod.#ctor(NightlyCode.Scripting.Parser.IExtensionProvider,NightlyCode.Scripting.Tokens.IScriptToken,System.String,NightlyCode.Scripting.Tokens.IScriptToken[])">
            <summary>
            creates a new <see cref="T:NightlyCode.Scripting.Tokens.ScriptMethod"/>
            </summary>
            <param name="extensions">pool containing known hosts</param>
            <param name="hosttoken">host of method to be called</param>
            <param name="methodname">name of method to call</param>
            <param name="parameters">parameters for method call</param>
        </member>
        <member name="M:NightlyCode.Scripting.Tokens.ScriptMethod.ExecuteToken(NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
        <member name="T:NightlyCode.Scripting.Tokens.ScriptToken">
            <summary>
            base implementation of a script token with basic error handling
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Tokens.ScriptToken.Execute(NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
        <member name="M:NightlyCode.Scripting.Tokens.ScriptToken.Execute``1(NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
        <member name="M:NightlyCode.Scripting.Tokens.ScriptToken.ExecuteToken(NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <summary>
            evaluates the result of the token
            </summary>
            <returns>result of statement</returns>
        </member>
        <member name="T:NightlyCode.Scripting.Tokens.ScriptValue">
            <summary>
            value in a script command
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Tokens.ScriptValue.#ctor(System.Object)">
            <summary>
            creates a new <see cref="T:NightlyCode.Scripting.Parser.ScriptParser"/>
            </summary>
            <param name="value">value</param>
        </member>
        <member name="P:NightlyCode.Scripting.Tokens.ScriptValue.Value">
            <summary>
            contained value
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Tokens.ScriptValue.ExecuteToken(NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
        <member name="M:NightlyCode.Scripting.Tokens.ScriptValue.ToString">
            <inheritdoc />
        </member>
        <member name="T:NightlyCode.Scripting.Tokens.ScriptVariable">
            <summary>
            access to variable in script
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Tokens.ScriptVariable.#ctor(System.String)">
            <summary>
            creates a new <see cref="T:NightlyCode.Scripting.Tokens.ScriptVariable"/>
            </summary>
            <param name="name">name of variable</param>
        </member>
        <member name="P:NightlyCode.Scripting.Tokens.ScriptVariable.Name">
            <summary>
            name of variable
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Tokens.ScriptVariable.ExecuteToken(NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
        <member name="M:NightlyCode.Scripting.Tokens.ScriptVariable.AssignToken(NightlyCode.Scripting.Tokens.IScriptToken,NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
        <member name="M:NightlyCode.Scripting.Tokens.ScriptVariable.ToString">
            <inheritdoc />
        </member>
        <member name="T:NightlyCode.Scripting.Tokens.TypeCast">
            <summary>
            changes the type of an expression result
            </summary>
        </member>
        <member name="M:NightlyCode.Scripting.Tokens.TypeCast.#ctor(System.Type,NightlyCode.Scripting.Tokens.IScriptToken)">
            <summary>
            creates a new <see cref="!:TypeCast&lt;T&gt;"/>
            </summary>
            <param name="targettype">target type</param>
            <param name="token">token resulting in value to cast</param>
        </member>
        <member name="M:NightlyCode.Scripting.Tokens.TypeCast.ExecuteToken(NightlyCode.Scripting.Parser.IVariableContext,NightlyCode.Scripting.Parser.IVariableProvider)">
            <inheritdoc />
        </member>
    </members>
</doc>
